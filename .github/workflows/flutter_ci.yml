# ------------------------------------------------------------------
# .github/workflows/flutter_ci.yml
#   ジョブ ❶ analyze   : lint を高速チェック
#   ジョブ ❷ test      : ユニットテスト + カバレッジ（Codecov）
#                        ＋ ★ flutter pub outdated で依存の古さを確認
#   └─ test は analyze が成功した時だけ実行 (needs:)
# ------------------------------------------------------------------

name: Flutter CI

# ────────────────────────────────────────────────
# push / pull_request いずれかで発火
# ────────────────────────────────────────────────
on: [push, pull_request]

# ════════════════════════════════════════════════
# ❶  静的解析（lint）ジョブ
# ════════════════════════════════════════════════
jobs:
  analyze:
    name: Analyze (Flutter)
    runs-on: ubuntu-latest  # GitHub が用意する Ubuntu 仮想マシン

    steps:
      # 1) リポジトリをチェックアウト
      - uses: actions/checkout@v4

      # 2) Flutter をインストール（SDK + ~/.pub-cache 自動キャッシュ）
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.6'   # ← プロジェクトで使っている Flutter のバージョン
          cache: true                 # 依存キャッシュで時間短縮

      # 3) 依存パッケージ取得
      - run: flutter pub get

      # 4) 静的解析
      #    --fatal-infos : info レベルもエラー扱い → CI で確実に検知
      - run: flutter analyze --no-pub --fatal-infos

# ════════════════════════════════════════════════
# ❷  テスト & カバレッジ ジョブ
#     ※ analyze が成功したら実行
# ════════════════════════════════════════════════
  test:
    name: Test & Coverage (Flutter)
    needs: analyze            # analyze が失敗したらスキップ
    runs-on: ubuntu-latest

    steps:
      # 1) チェックアウト
      - uses: actions/checkout@v4

      # 2) Flutter セットアップ
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.6'
          cache: true

      # 3) 依存取得
      - run: flutter pub get

      # 4) ★ 依存が古いかチェック
      # -------------------------------------------------------------
      #   * Flutter/Dart 3 では --mode=null-safety は廃止
      #   * コマンドは非 0 で終わる可能性があるので "|| true" で
      #     “警告表示だけ出して先に進む” 仕様にしている
      # -------------------------------------------------------------
      - name: Check outdated packages (non-blocking)
        run: flutter pub outdated || true

      # 5) ユニットテスト + カバレッジ生成
      - run: flutter test --coverage

      # 6) Codecov にカバレッジをアップロード
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        env:
          # ※ Public リポジトリなら下 2 行は削除して OK
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: coverage/lcov.info
          slug: gotty412/RecipeVault
          # verbose: true   # ← デバッグしたい時だけコメント解除
